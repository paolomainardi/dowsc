<?php

/**
 * Implementation of hook_views_api().
 */
function dowsc_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'dowsc') .'/views',
  );
}

/**
 * Implementation of hook_ctools_plugin_api().
 */
function dowsc_ctools_plugin_api($module, $api) {
  if ($module == "openlayers") {
    switch ($api) {
      case 'openlayers_layers':
        return array('version' => 1);
    }
  }
}

function _dowsc_build_view_layer($view, $display_name) {

    $data = $view->display[$display_name];

    $layer = new stdClass();
    $layer->api_version = 1;
    $layer->name = $view->name . '_' . $display_name;
    $layer->title = $view->get_title();
    if ( empty($layer->title) ) $layer->title = $view->name;
    $layer->description = $view->description . ' - ' . $data->display_title;
    $layer->data = array(
      'layer_type' => 'dowsc_layer',
      'projection' => array('4326'),
      'baselayer' => FALSE,
      'views' => array('view' => $view->name, 'display' => $display_name),
    );
  return $layer;
}

function _dowsc_add_view_layers($view, $display_name, &$layers) {
        //Build Layer
        $layer = _dowsc_build_view_layer($view, $display_name);
        $layers[$layer->name] = $layer;
}

/**
 * Implementation of hook_openlayers_layers().
 */
function dowsc_openlayers_layers() {

  $layers = array();

  // Attempt to load information from cache.
  // For now use a arg based check for skipping cache.
  if (arg(0) != 'admin') {
    $cache = cache_get('dowsc');
    if (isset($cache->data)) {
      return $cache->data;
    }
  }

  $views = views_get_all_views();
  /**
   * Provide each WASH Chart Data display as a layer
   */
  foreach ($views as $view) {
    foreach ($view->display as $display => $data) {
      $view->set_display($display);
      //if ($data->display_options['style_plugin'] == 'dowsc_style')
      if ($data->display_plugin == 'dowsc_display')
      {
        _dowsc_add_view_layers($view, $display, $layers);
      }
    }
    $view->destroy();
  }  
  cache_set('dowsc', $layers);
  return $layers;
} 

/**
 * Implementation of hook_openlayers_layer_types()
 */
function dowsc_openlayers_layer_types() {
  return array(
    'dowsc_layer' => array(
      'title' => t('Dynamic OWS'),
      'description' => t('A dynamic WMS layer provided by view. Not meant to be created by UI.'),
      'layer_type' => array(
        'path' => drupal_get_path('module', 'dowsc')
          .'/layer_types',
        'file' => 'dowsc_layer.inc',
        'class' => 'dowsc_layer',
        'parent' => 'openlayers_layer_type',
      ),
    ),
  );
}

/**
 * Implementation of hook_form_alter()
 */
function dowsc_form_alter(&$form, $form_state, $form_id) {
  switch ($form_id) {
    case 'openlayers_ui_object_export':
      // prevent exporting in the openlayers interface
      if (isset($form['#parameters'][3]->data['layer_type']) &&
        $form['#parameters'][3]->data['layer_type'] == 'dowsc_layer') {
        if (module_exists('views_ui')) {
          $form['export'] = array(
            '#value' => t(
              'This layer is provided by a view, so it must be exported via the 
              Views interface as a view. <a href="@url">Export this view 
              using the views module.</a>',
              array(
                '@url' => url('admin/build/views/export/' . 
                $form['#parameters'][3]->data['views']['view'])
              )
            )
          );
          unset($form['done']);
        }
        else {
          $form['export'] = array(
            '#value' => t(
              'This layer is provided by a view, so it must be exported via the 
              Views interface as a view. Enable the Views UI 
              module to export it.'));
          unset($form['done']);
        }
      }
      break;
    case 'openlayers_ui_layers_form':
      // prevent cloning in the openlayers interface
      if (isset($form['#parameters'][2]->data['layer_type']) && 
        $form['#parameters'][2]->data['layer_type'] == 'dowsc_layer') {
        $form = array(
          'message' => array(
            '#value' => t(
              'This layer is provided by a view, so it can be cloned by cloning 
              the view in the <a href="@url">Views interface.</a>',
              array(
                '@url' => url('admin/build/views/')
              )
            )
          )
          );
      }
      break;
  }
}

/*
 * implementation of hook_menu
 */
function dowsc_menu()
{
  //echo "dowsc_menu called"; die();
  $items['admin/settings/dowsc'] = array(
    'title' => 'Dynamic OWS Settings',
    'description' => 'Configure the Dynamic OWS client',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dowsc_settings'),
    'access arguments' => array('administer site configuration'),
  );

  // HACK xxx
  $items['country'] = array(
    'page callback' => '_dowsc_country_hack',
    'page arguments' => array(0, 1, 2),
    'access arguments' => array('access content'),
    'type'             => MENU_CALLBACK
  );
  $items['region'] = array(
    'page callback' => '_dowsc_country_hack',
    'page arguments' => array(0, 1, 2),
    'access arguments' => array('access content'),
    'type'	       => MENU_CALLBACK
  );

  return $items;
}

  // HACK xxx
function _dowsc_country_hack($type, $id, $name) {
  $ret = '<p>(Fake) Info for ' . $type . ' with id ' . $id;
  if ( !empty($name) ) {
    $ret .= ' and name ' . $name . '</p>';
  }
  $ret .= '<p>Drop the code from dowsc.module when something better comes</p>';
  return $ret;
}

function dowsc_default_baseurl() {
  $def_base_url = base_path() . '/dows';
  return $def_base_url;
}


/**
 * Implementation of hook_settings()
 */
function dowsc_settings()
{
  $def_base_url = dowsc_default_baseurl();

  $form['dowsc_settings']['service_baseurl'] = array(
    '#title' => t('Base URL of Dynamic OWS service'),
    '#type' => 'textfield',
    '#default_value' => variable_get('service_baseurl', $def_base_url),
    '#description' =>
      t('Base URL of Dynamic OWS service (ie: !ex)',
        array('!ex' => $def_base_url))
  );

  $form['dowsc_settings']['force'] = array(
    '#title' => t('Force refresh'),
    '#type' => 'checkbox',
    '#default_value' => variable_get('force', false),
    '#description' =>
      t('Force re-creation of dynamic OWS service (mainly for debugging)')
  );

  $form['dowsc_settings']['debug'] = array(
    '#title' => t('Debug'),
    '#type' => 'checkbox',
    '#default_value' => variable_get('debug', false),
    '#description' =>
      t('Debug requests to the DOWS server (check out watchlog)')
  );


  return system_settings_form($form);
}

/**
 * API: dowsc_config_baseurl()
 * Return configured (or default) base url
 * 
 */
function dowsc_config_baseurl() {
  $def_base_url = dowsc_default_baseurl();
  $url  = variable_get('service_baseurl', $def_base_url);
  return $url;
}

/**
 * API: dowsc_get_wms_base_url($wms_cfg)
 *
 * Given a DOWS configuration, return the base url of configured
 * WMS service. Can throw an exception 
 *
 */
function dowsc_get_wms_base_url($wms_cfg)
{
    // TODO: fixme: 'acpmap_' shouldn't be part of the DOWS api
    $url  = dowsc_config_baseurl() . '/acpmap_wmsconfig.php';

    $params = array('wmscfg' => json_encode($wms_cfg));
    $force = variable_get('force', false);
    if ( $force ) { $params['force'] = 1; }

    $crl = curl_init();
    curl_setopt($crl, CURLOPT_URL, $url);
    curl_setopt($crl, CURLOPT_FOLLOWLOCATION, 1);
    curl_setopt($crl, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($crl, CURLOPT_POST, TRUE);
    curl_setopt($crl, CURLOPT_POSTFIELDS, $params);
    $result = curl_exec($crl);

    // This is for debugging
    $url_get = $url.'?wmscfg=' . urlencode(json_encode($wms_cfg));

    if ( empty($result) ) {
        throw new Exception(
          'Empty result from WMSConfig DOWS service'
          . ' (<a href="'.$url_get.'">url</a>)');
    }

    list($success, $data) = explode(':', $result, 2);
    if ( $success != 'SUCCESS' ) {
        throw new Exception(
          'Error from WMSConfig DOWS service: ' . $result
          . ' (<a href="'.$url_get.'">url</a>)');
    } else {
      $debug = variable_get('debug', false);
      if ( $debug ) {
        watchdog('dowsc', 'DOWS request: <a href="!url">url</a>',
          array('!url' => $url_get),
          WATCHDOG_DEBUG);
      }
    }

    $wmsurl = trim($data);
    return $wmsurl;
}
